// Generated by LiveScript 1.3.1
(function(){
  var root, maximum, showquizzes, showsummary, showwikipedia, nodehovered, parent_dep_sorting_func, parent_dep_sorting_func_simple, parent_dep_sorting_func_real, is_learnable, repaint_nodes, next_topic, topicfinished, set_topic, initialize, show_curriculum_view, makeModuleTreeData, computeMaxDepth, show_module_view, load_page, out$ = typeof exports != 'undefined' && exports || this;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  maximum = require('prelude-ls').maximum;
  out$.showquizzes = showquizzes = function(){
    var name, ref$, quiz, quizlink;
    $('.showlessonbutton').removeClass('active');
    $('#showquizzesbutton').addClass('active');
    name = root.viewed_topic;
    if (root.rawdata[name] != null) {
      ref$ = root.rawdata[name], quiz = ref$.quiz, quizlink = ref$.quizlink;
      if (quizlink != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', quizlink);
        return;
      }
      if (quiz != null) {
        $('#lessonframe').hide();
        $('#lessondiv').show();
        $('#lessondiv').html(quiz);
        return;
      }
    }
    $('#lessonframe').hide();
    $('#lessondiv').show();
    return $('#lessondiv').text("Sorry, we don't yet have quizzes for " + name);
  };
  out$.showsummary = showsummary = function(){
    var name, ref$, summary, summarylink, link;
    $('.showlessonbutton').removeClass('active');
    $('#showsummarybutton').addClass('active');
    name = root.viewed_topic;
    $('#topicname').text(name);
    $('#makefocustopic').attr('href', '/mkcurriculum.html?' + $.param({
      topic: name
    }));
    $('#viewnetwork').attr('href', '/?' + $.param({
      topic: name
    }));
    if (root.rawdata[name] != null) {
      ref$ = root.rawdata[name], summary = ref$.summary, summarylink = ref$.summarylink, link = ref$.link;
      if (summary != null) {
        $('#lessonframe').hide();
        $('#lessondiv').show();
        $('#lessondiv').text(summary);
        return;
      }
      if (summarylink != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', summarylink);
        return;
      }
      if (link != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', link);
        return;
      }
    }
    $('#lessonframe').hide();
    $('#lessondiv').show();
    return $('#lessondiv').text("Sorry, we don't yet have a lesson for " + name);
  };
  out$.showwikipedia = showwikipedia = function(){
    var name, link;
    $('.showlessonbutton').removeClass('active');
    $('#showwikipediabutton').addClass('active');
    name = root.viewed_topic;
    $('#topicname').text(name);
    $('#makefocustopic').attr('href', '/mkcurriculum.html?' + $.param({
      topic: name
    }));
    $('#viewnetwork').attr('href', '/?' + $.param({
      topic: name
    }));
    if (root.rawdata[name] != null) {
      link = root.rawdata[name].link;
      if (link != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', link);
        return;
      }
    }
    $('#lessonframe').hide();
    $('#lessondiv').show();
    return $('#lessondiv').text("Sorry, we don't yet have a lesson for " + name);
  };
  out$.nodehovered = nodehovered = function(name){
    if (name != null) {
      root.viewed_topic = name;
    }
    return showsummary();
  };
  parent_dep_sorting_func = function(a, b){
    return -parent_dep_sorting_func_simple(a, b);
    if (root.visformat === 1 || root.visformat === 2) {
      return -parent_dep_sorting_func_real(a, b);
    }
    return parent_dep_sorting_func_real(a, b);
  };
  parent_dep_sorting_func_simple = function(a, b){
    var bradius, aradius;
    bradius = getnoderadius_percent(b.name);
    aradius = getnoderadius_percent(a.name);
    if (aradius > bradius) {
      return 1;
    }
    if (bradius > aradius) {
      return -1;
    }
    return 0;
  };
  parent_dep_sorting_func_real = function(a, b){
    var relation_order, relation_diff, bradius, aradius;
    relation_order = ['parents', 'depends'];
    relation_diff = relation_order.indexOf(a.relation) - relation_order.indexOf(b.relation);
    if (relation_diff !== 0) {
      return -relation_diff;
    }
    bradius = getnoderadius_percent(b.name);
    aradius = getnoderadius_percent(a.name);
    if (aradius > bradius) {
      return 1;
    }
    if (bradius > aradius) {
      return -1;
    }
    return 0;
  };
  root.viewed_topic = '';
  root.learned_topics = {};
  out$.is_learnable = is_learnable = function(topic_name){
    var ref$, parents, depends, i$, len$, x;
    ref$ = rawdata[topic_name], parents = ref$.parents, depends = ref$.depends;
    if (parents != null) {
      for (i$ = 0, len$ = parents.length; i$ < len$; ++i$) {
        x = parents[i$];
        if (root.learned_topics[x] == null) {
          return false;
        }
      }
    }
    if (depends != null) {
      for (i$ = 0, len$ = depends.length; i$ < len$; ++i$) {
        x = depends[i$];
        if (root.learned_topics[x] == null) {
          return false;
        }
      }
    }
    return true;
  };
  out$.repaint_nodes = repaint_nodes = function(){
    var topic_name, i$, ref$, len$, x, curname, results$ = [];
    topic_name = root.viewed_topic;
    for (i$ = 0, len$ = (ref$ = $('.topicname')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      curname = $(x).text();
      if (curname === topic_name) {
        $(x).css('font-weight', 'bold');
      } else {
        $(x).css('font-weight', 'normal');
      }
    }
    for (i$ = 0, len$ = (ref$ = $('.topicnode')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      curname = $(x).attr('data-topicname');
      if (root.learned_topics[curname] != null) {
        results$.push($(x).css('fill', 'green'));
      } else if (is_learnable(curname)) {
        results$.push($(x).css('fill', 'blue'));
      }
    }
    return results$;
  };
  out$.next_topic = next_topic = function(){
    var available_topics, i$, ref$, len$, x, curname;
    available_topics = [];
    for (i$ = 0, len$ = (ref$ = $('.topicname')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      curname = $(x).text();
      if (!root.learned_topics[curname] && is_learnable(curname)) {
        available_topics.push(curname);
      }
    }
    available_topics.sort(function(a, b){
      var bradius, aradius;
      bradius = getnoderadius_percent(b);
      aradius = getnoderadius_percent(a);
      if (aradius > bradius) {
        return 1;
      }
      if (bradius > aradius) {
        return -1;
      }
      return 0;
    });
    if (available_topics.length > 0) {
      return set_topic(available_topics[available_topics.length - 1]);
    } else {
      return repaint_nodes();
    }
  };
  out$.topicfinished = topicfinished = function(){
    root.learned_topics[root.viewed_topic] = true;
    return next_topic();
  };
  out$.set_topic = set_topic = function(topic_name){
    $('#topicdisplay').text(topic_name);
    $('#finishedbutton').text('Finished Learning ' + topic_name);
    $('#finishedbutton').show();
    $('#moduleviewbutton').text('View Module for ' + topic_name);
    if (root.rawdata[topic_name].children != null) {
      $('#moduleviewbutton').show();
    } else {
      $('#moduleviewbutton').hide();
    }
    $('#curriculumviewbutton').text('View Prerequisites for ' + topic_name);
    $('#curriculumviewbutton').show();
    root.viewed_topic = topic_name;
    repaint_nodes();
    return showsummary();
  };
  initialize = function(treeData, max_depth, is_module){
    var canvas_width, canvas_height, vis, tree, diagonal, nodes, links, link, node;
    if (is_module == null) {
      is_module = false;
    }
    $('#curriculum').html('');
    canvas_width = max_depth * 250;
    canvas_height = 100;
    vis = d3.select('#curriculum').append('svg:svg').attr('width', canvas_width + 300).attr('height', canvas_height).append('svg:g').attr('transform', 'translate(10, 0)');
    tree = d3.layout.tree().size([canvas_height, canvas_width]);
    diagonal = d3.svg.diagonal().projection(function(d){
      return [
        is_module
          ? d.y
          : canvas_width - d.y, d.x
      ];
    });
    nodes = tree.nodes(treeData);
    links = tree.links(nodes);
    link = vis.selectAll('pathlink').data(links).enter().append('svg:path').attr('class', 'link').attr('d', diagonal).style('stroke', function(d){
      /*
      source_name = d.source.name
      target_name = d.target.name
      console.log source_name + ',' + target_name
      target_children = root.rawdata[target_name].children
      if target_children?
        if target_children.indexOf(source_name) != -1
          return colors(1)
      source_depends = root.rawdata[source_name].depends
      if source_depends?
        if source_depends.indexOf(target_name) != -1
          return colors(0)
      #colors(2)
      #null
      */
      return 'black';
    }).style('stroke-opacity', function(d){
      return 0.2;
    });
    node = vis.selectAll('g.node').data(nodes).enter().append('svg:g').attr('transform', function(d){
      return 'translate(' + (is_module
        ? d.y
        : canvas_width - d.y) + ',' + d.x + ')';
    });
    node.append('svg:circle').attr('r', 3.5).attr('class', 'topicnode').attr('data-topicname', function(d){
      return d.name;
    }).style('cursor', 'pointer').on('click', function(d){
      return set_topic(d.name);
    });
    return node.append('svg:text').attr('dx', function(d){
      return 8;
    }).attr('dy', 3).attr('text-anchor', function(d){
      return 'start';
    }).text(function(d){
      return d.name;
    }).style('cursor', 'pointer').attr('class', 'topicname').on('click', function(d){
      return set_topic(d.name);
    });
  };
  out$.show_curriculum_view = show_curriculum_view = function(topic){
    var parents_and_depends, max_depth, treeData, name_to_treedata, i$, ref$, len$, cur_depth, j$, ref1$, len1$, ref2$, name, relation, depth, parent, parent_node, new_url;
    if (topic == null) {
      topic = root.viewed_topic;
    }
    parents_and_depends = list_parents_and_depends_recursive(topic);
    if (parents_and_depends.length === 0) {
      root.max_depth = max_depth = 0;
    } else {
      root.max_depth = max_depth = maximum(
      parents_and_depends.map(function(it){
        return it.depth;
      }));
    }
    out$.treeData = treeData = {
      name: topic,
      children: []
    };
    out$.name_to_treedata = name_to_treedata = {};
    name_to_treedata[topic] = treeData;
    for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
      cur_depth = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = parents_and_depends.filter(fn1$)).length; j$ < len1$; ++j$) {
        ref2$ = ref1$[j$], name = ref2$.name, relation = ref2$.relation, depth = ref2$.depth, parent = ref2$.parent;
        if (name_to_treedata[name] != null) {
          continue;
        }
        parent_node = name_to_treedata[parent];
        parent_node.children.push({
          name: name,
          children: []
        });
        name_to_treedata[name] = (ref2$ = parent_node.children)[ref2$.length - 1];
      }
    }
    initialize(treeData, max_depth);
    set_topic(topic);
    next_topic();
    new_url = location.href;
    if (new_url.indexOf('?') !== -1) {
      new_url = new_url.slice(0, new_url.indexOf('?'));
    }
    new_url = new_url + '?' + $.param({
      view: 'curriculum',
      topic: topic,
      graph_file: root.params.graph_file
    });
    if (new_url !== history.state) {
      return history.pushState(new_url, null, new_url);
    }
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = max_depth; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
    function fn1$(x){
      return x.depth === cur_depth;
    }
  };
  makeModuleTreeData = function(topic){
    var treeData, name_to_treedata, agenda, i$, ref$, len$, child, curtopic, parent, parent_tree;
    treeData = {
      name: topic,
      children: []
    };
    name_to_treedata = {};
    name_to_treedata[topic] = treeData;
    agenda = [];
    if (root.rawdata[topic] && root.rawdata[topic].children != null) {
      for (i$ = 0, len$ = (ref$ = root.rawdata[topic].children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        agenda.push([child, topic]);
      }
    }
    while (agenda.length > 0) {
      ref$ = agenda.shift(), curtopic = ref$[0], parent = ref$[1];
      if (name_to_treedata[curtopic] != null) {
        continue;
      }
      parent_tree = name_to_treedata[parent];
      parent_tree.children.push({
        name: curtopic,
        children: []
      });
      name_to_treedata[curtopic] = (ref$ = parent_tree.children)[ref$.length - 1];
      if (root.rawdata[curtopic].children != null) {
        for (i$ = 0, len$ = (ref$ = root.rawdata[curtopic].children).length; i$ < len$; ++i$) {
          child = ref$[i$];
          agenda.push([child, curtopic]);
        }
      }
    }
    return treeData;
  };
  computeMaxDepth = function(treeData){
    var x;
    if (treeData.children.length === 0) {
      return 0;
    }
    return 1 + maximum((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = treeData.children).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(computeMaxDepth(x));
      }
      return results$;
    }()));
  };
  out$.show_module_view = show_module_view = function(topic){
    var treeData, max_depth, new_url;
    if (topic == null) {
      topic = root.viewed_topic;
    }
    out$.treeData = treeData = makeModuleTreeData(topic);
    max_depth = computeMaxDepth(treeData);
    initialize(treeData, max_depth, true);
    set_topic(topic);
    next_topic();
    new_url = location.href;
    if (new_url.indexOf('?') !== -1) {
      new_url = new_url.slice(0, new_url.indexOf('?'));
    }
    new_url = new_url + '?' + $.param({
      view: 'module',
      topic: topic
    });
    if (new_url !== history.state) {
      return history.pushState(new_url, null, new_url);
    }
  };
  window.addEventListener('popstate', function(e){
    console.log(location.pathname);
    return load_page();
  });
  load_page = function(){
    var params, topic, view;
    root.params = params = getUrlParameters();
    topic = params.topic;
    view = params.view;
    if (view == null) {
      view = 'curriculum';
    }
    if (topic == null) {
      $('#curriculum').text('need to provide topic');
      return;
    }
    if (root.rawdata[topic] == null) {
      $('#curriculum').text('topic does not exist: ' + topic);
      return;
    }
    if (view === 'module') {
      return show_module_view(topic);
    } else {
      return show_curriculum_view(topic);
    }
  };
  $(document).ready(function(){
    var params, topic, output, graph_file, ref$;
    console.log('document ready');
    root.params = params = getUrlParameters();
    topic = params.topic;
    if (topic == null) {
      $('#curriculum').text('need to provide topic');
      return;
    }
    output = [];
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'graph.yaml';
    return $.get(graph_file, function(yamltxt){
      var data;
      console.log('preprocess');
      root.rawdata = data = preprocess_data(jsyaml.safeLoad(yamltxt));
      console.log('rawdata fininshed');
      return get_bing_counts(data, function(counts){
        var topic_name, count;
        for (topic_name in counts) {
          count = counts[topic_name];
          root.topic_to_bing_count[topic_name] = count;
        }
        return load_page();
      });
    });
  });
}).call(this);
