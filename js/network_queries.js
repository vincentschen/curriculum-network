// Generated by LiveScript 1.3.1
(function(){
  var unique, list_relation_recursive, list_parent_names, list_all_related_node_names_recursive, list_children_recursive, list_children_names_recursive, list_depends_recursive, list_depends_names_recursive, list_suggests_recursive, list_suggests_names_recursive, out$ = typeof exports != 'undefined' && exports || this;
  unique = require('prelude-ls').unique;
  /*
  export list_relation_recursive = (property, name) ->
    output = []
    if not rawdata[name]? or not rawdata[name][property]?
      return output
    for child in rawdata[name][property]
      output.push {
        child: child
        source: name
      }
      for descendant in list_relation_recursive(property, child)
        output.push descendant
    return output
  */
  out$.list_relation_recursive = list_relation_recursive = function(property, name, output_set){
    var i$, ref$, len$, child, k, v;
    if (output_set == null) {
      output_set = {};
    }
    if (rawdata[name] == null || rawdata[name][property] == null) {
      return [];
    }
    for (i$ = 0, len$ = (ref$ = rawdata[name][property]).length; i$ < len$; ++i$) {
      child = ref$[i$];
      if (output_set[child] == null) {
        output_set[child] = {
          child: child,
          source: name
        };
        list_relation_recursive(property, child, output_set);
      }
    }
    return (function(){
      var ref$, results$ = [];
      for (k in ref$ = output_set) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }());
  };
  out$.list_parent_names = list_parent_names = function(name){
    var output, topic_name, ref$, topic_info, children;
    output = [];
    for (topic_name in ref$ = rawdata) {
      topic_info = ref$[topic_name];
      children = topic_info.children;
      if (children != null) {
        if (children.indexOf(name) !== -1) {
          output.push(topic_name);
        }
      }
    }
    return output;
  };
  out$.list_all_related_node_names_recursive = list_all_related_node_names_recursive = function(name, output_set){
    var i$, ref$, len$, property, related_nodes, j$, len1$, child;
    if (output_set == null) {
      output_set = {};
    }
    if (rawdata[name] == null) {
      return [];
    }
    if (output_set[name] != null) {
      return [];
    }
    output_set[name] = true;
    for (i$ = 0, len$ = (ref$ = relation_types).length; i$ < len$; ++i$) {
      property = ref$[i$];
      related_nodes = rawdata[name][property];
      if (related_nodes != null) {
        for (j$ = 0, len1$ = related_nodes.length; j$ < len1$; ++j$) {
          child = related_nodes[j$];
          if (output_set[child] == null) {
            list_all_related_node_names_recursive(child, output_set);
          }
        }
      }
    }
    return Object.keys(output_set);
  };
  out$.list_children_recursive = list_children_recursive = function(name){
    return list_relation_recursive('children', name);
  };
  out$.list_children_names_recursive = list_children_names_recursive = function(name){
    return list_children_recursive(name).map(function(it){
      return it.child;
    });
  };
  out$.list_depends_recursive = list_depends_recursive = function(name){
    return list_relation_recursive('depends', name);
  };
  out$.list_depends_names_recursive = list_depends_names_recursive = function(name){
    return list_depends_recursive(name).map(function(it){
      return it.child;
    });
  };
  out$.list_suggests_recursive = list_suggests_recursive = function(name){
    return [];
  };
  out$.list_suggests_names_recursive = list_suggests_names_recursive = function(name){
    return list_suggests_recursive(name).map(function(it){
      return it.child;
    });
  };
}).call(this);
