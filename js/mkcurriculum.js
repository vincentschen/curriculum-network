// Generated by LiveScript 1.3.1
(function(){
  var root, maximum, alphabet, alphabet_set, isalpha, toclassname, showquizzes, showwikipedia, nodehovered, create_node_display, insert_module_topic, insert_root_topic, insert_child_topic, parent_dep_sorting_func, parent_dep_sorting_func_real, out$ = typeof exports != 'undefined' && exports || this;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  maximum = require('prelude-ls').maximum;
  alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]);
  alphabet_set = {};
  (function(){
    var i$, ref$, len$, c, results$ = [];
    for (i$ = 0, len$ = (ref$ = alphabet).length; i$ < len$; ++i$) {
      c = ref$[i$];
      results$.push(alphabet_set[c] = true);
    }
    return results$;
  })();
  isalpha = function(c){
    return alphabet_set[c] != null;
  };
  toclassname = function(name){
    return name.split('').filter(isalpha).join('');
  };
  out$.showquizzes = showquizzes = function(){
    var name, ref$, quiz, quizlink;
    $('.showlessonbutton').removeClass('active');
    $('#showquizzesbutton').addClass('active');
    name = root.curnode_shown;
    if (root.rawdata[name] != null) {
      ref$ = root.rawdata[name], quiz = ref$.quiz, quizlink = ref$.quizlink;
      if (quizlink != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', quizlink);
        return;
      }
      if (quiz != null) {
        $('#lessonframe').hide();
        $('#lessondiv').show();
        $('#lessondiv').html(quiz);
        return;
      }
    }
    $('#lessonframe').hide();
    $('#lessondiv').show();
    return $('#lessondiv').text("Sorry, we don't yet have quizzes for " + name);
  };
  out$.showwikipedia = showwikipedia = function(){
    var name, link;
    $('.showlessonbutton').removeClass('active');
    $('#showwikipediabutton').addClass('active');
    name = root.curnode_shown;
    $('#topicname').text(name);
    $('#makefocustopic').attr('href', '/mkcurriculum.html?' + $.param({
      topic: name
    }));
    $('#viewnetwork').attr('href', '/?' + $.param({
      topic: name
    }));
    if (root.rawdata[name] != null) {
      link = root.rawdata[name].link;
      if (link != null) {
        $('#lessondiv').hide();
        $('#lessonframe').show();
        $('#lessonframe').attr('src', link);
        return;
      }
      if (typeof lesson != 'undefined' && lesson !== null) {
        $('#lessonframe').hide();
        $('#lessondiv').show();
        $('#lessondiv').text(lesson);
        return;
      }
    }
    $('#lessonframe').hide();
    $('#lessondiv').show();
    return $('#lessondiv').text("Sorry, we don't yet have a lesson for " + name);
  };
  out$.nodehovered = nodehovered = function(name){
    if (name != null) {
      root.curnode_shown = name;
    }
    return showwikipedia();
  };
  create_node_display = function(name){
    var tooltip_info, tooltip_html, output;
    tooltip_info = import$({
      importance: getnoderadius_percent(name).toPrecision(2)
    }, root.rawdata[name]);
    tooltip_html = jsyaml.safeDump(tooltip_info).split('\n').join('<br>');
    output = $('<div>').text(name).addClass(toclassname(name)).addClass('needtooltip').addClass('roundedbox').attr({
      depth: -1,
      'data-toggle': 'tooltip',
      'title': $('<div>').css('text-align', 'left').html(tooltip_html)[0].outerHTML
    }).click(function(){
      return nodehovered(name);
    });
    return output;
  };
  insert_module_topic = function(name){
    var marginleft, output;
    marginleft = 0;
    if (root.visformat === 2) {
      marginleft = 20 * (root.max_depth + 1);
    }
    output = create_node_display(name).css({
      'margin-left': marginleft + "px",
      'background-color': '#800000'
    });
    return $('#curriculum').append($('<div>').append(output));
  };
  insert_root_topic = function(name){
    var marginleft, output;
    marginleft = 20;
    if (root.visformat === 2) {
      marginleft = 20 * root.max_depth;
    }
    output = create_node_display(name).data({
      depth: 0
    }).css({
      'margin-left': marginleft + "px",
      'background-color': 'black'
    });
    return $('#curriculum').append($('<div>').append(output));
  };
  insert_child_topic = function(name, relation, depth, parent){
    var marginleft, relation_color, output;
    marginleft = (depth + 1) * 20;
    if (root.visformat === 2) {
      marginleft = 20 * (root.max_depth - depth);
    }
    relation_color = getcolorforrelation('depends');
    if (root.all_parent_names.indexOf(name) !== -1) {
      relation_color = getcolorforrelation('parents');
    }
    output = create_node_display(name).data({
      depth: depth,
      parentname: parent
    }).css({
      'margin-left': marginleft + "px",
      'background-color': relation_color
    });
    if (root.visformat === 1 || root.visformat === 2) {
      return $('<div>').append(output).insertBefore($('.' + toclassname(parent)));
    } else {
      return $('<div>').append(output).insertAfter($('.' + toclassname(parent)));
    }
  };
  parent_dep_sorting_func = function(a, b){
    if (root.visformat === 1 || root.visformat === 2) {
      return -parent_dep_sorting_func_real(a, b);
    }
    return parent_dep_sorting_func_real(a, b);
  };
  parent_dep_sorting_func_real = function(a, b){
    var relation_order, relation_diff, bradius, aradius;
    relation_order = ['parents', 'depends'];
    relation_diff = relation_order.indexOf(a.relation) - relation_order.indexOf(b.relation);
    if (relation_diff !== 0) {
      return -relation_diff;
    }
    bradius = getnoderadius_percent(b.name);
    aradius = getnoderadius_percent(a.name);
    if (aradius > bradius) {
      return 1;
    }
    if (bradius > aradius) {
      return -1;
    }
    return 0;
  };
  $(document).ready(function(){
    var params, new_visformat, stored_visformat, topic, output, graph_file, ref$;
    root.params = params = getUrlParameters();
    root.visformat = 0;
    if (root.params.visformat != null) {
      new_visformat = parseInt(root.params.visformat);
      if (isFinite(new_visformat)) {
        root.visformat = new_visformat;
        localStorage.setItem('visformat', new_visformat);
      }
    } else {
      stored_visformat = parseInt(localStorage.getItem('visformat'));
      if (isFinite(stored_visformat)) {
        root.visformat = stored_visformat;
      }
    }
    topic = params.topic;
    if (topic == null) {
      $('#curriculum').text('need to provide topic');
      return;
    }
    output = [];
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'graph.yaml';
    return $.get(graph_file, function(yamltxt){
      var data;
      root.rawdata = data = preprocess_data(jsyaml.safeLoad(yamltxt));
      return get_bing_counts(data, function(counts){
        var topic_name, count, parents_and_depends, max_depth, i$, ref$, len$, module_name, cur_depth, j$, ref1$, len1$, ref2$, name, relation, depth, parent, seen_nodes, dup_nodes, x, curname;
        for (topic_name in counts) {
          count = counts[topic_name];
          root.topic_to_bing_count[topic_name] = count;
        }
        if (data[topic] == null) {
          $('#curriculum').text('topic does not exist: ' + topic);
          return;
        }
        root.all_parent_names = list_parent_names_recursive(topic);
        parents_and_depends = list_parents_and_depends_recursive(topic);
        root.max_depth = max_depth = maximum(
        parents_and_depends.map(function(it){
          return it.depth;
        }));
        if (root.visformat === 1 || root.visformat === 2) {
          insert_root_topic(topic);
          for (i$ = 0, len$ = (ref$ = list_modules_node_is_part_of(topic)).length; i$ < len$; ++i$) {
            module_name = ref$[i$];
            insert_module_topic(module_name);
          }
        } else {
          for (i$ = 0, len$ = (ref$ = list_modules_node_is_part_of(topic)).length; i$ < len$; ++i$) {
            module_name = ref$[i$];
            insert_module_topic(module_name);
          }
          insert_root_topic(topic);
        }
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          cur_depth = ref$[i$];
          for (j$ = 0, len1$ = (ref1$ = parents_and_depends.filter(fn1$).sort(parent_dep_sorting_func)).length; j$ < len1$; ++j$) {
            ref2$ = ref1$[j$], name = ref2$.name, relation = ref2$.relation, depth = ref2$.depth, parent = ref2$.parent;
            insert_child_topic(name, relation, depth, parent);
          }
        }
        seen_nodes = {};
        dup_nodes = {};
        for (i$ = 0, len$ = (ref$ = $('.roundedbox')).length; i$ < len$; ++i$) {
          x = ref$[i$];
          curname = $(x).text();
          if (seen_nodes[curname] != null) {
            $(x).hide();
            $(x).css('background-color', '#666666');
            dup_nodes[curname] = true;
            if (dup_nodes[$(x).data('parentname')] != null) {
              $(x).hide();
            }
          }
          seen_nodes[curname] = true;
        }
        $('.needtooltip').tooltip({
          html: true,
          placement: 'bottom'
        });
        return nodehovered(topic);
        function fn$(){
          var i$, to$, results$ = [];
          for (i$ = 0, to$ = max_depth; i$ <= to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }
        function fn1$(x){
          return x.depth === cur_depth;
        }
      });
    });
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
