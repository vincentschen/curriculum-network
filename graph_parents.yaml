graph_metadata:
  relation_types:
    - depends # depends on an external thing - essentially going "sideways"
    - parents # depends on a parent - going upwards in the skill tree
    #- module # this is a module that consists of many parts - dependencies going downwards in the skill tree
    #- select_any # this is a module that can be fulfilled by fulfiling any single one of its parts
  #preprocessing_steps:
  #  - convert_parents_to_children
Sorting:
  link: https://en.wikipedia.org/wiki/Sorting_algorithm
  depends:
    - Array
#Sorting implementation:
#  tags: [sorting, implementation]
#  parents:
#    - Sorting
#  select_any:
#    - Mergesort implementation
#    - Heapsort implementation
Mergesort:
  link: https://en.wikipedia.org/wiki/Merge_sort
  depends:
    - Sorting
    - Recursion
Mergesort implementation:
  tags: [mergesort, implementation]
  parents:
    - Mergesort
Heapsort:
  summary: Heapsort is a sorting algorithm that works by creating a min heap and repeatedly extracting the minimum value from it
  link: https://en.wikipedia.org/wiki/Heapsort
  depends:
    - Sorting
    - Min heap
Heapsort implementation:
  tags: [heapsort, implementation]
  summary: To implement heapsort, you need to implement a min heap with the heapify and extract-min operations, then use it to
  link: https://en.wikipedia.org/wiki/Heapsort#Pseudocode
  parents:
    - Heapsort
  depends:
    #- Heap implementation
    #- Heapify implementation (binary heap)
    #- Extract-min implementation (binary heap)
    - Heap interface
Heap interface:
  tags: [heap, interface]
  parents:
    - Heaps
  depends:
    - Classes
#Heap implementation:
#  tags: [heap, implementation]
#  select_any:
#    - Binary heap implementation
#    - Fibonacci heap implementation
Binary heap complexity analysis:
  tags: [binary heap, complexity analysis]
  parents:
    - Binary heap
Fibonacci heap complexity analysis:
  tags: [fibonacci heap, complexity analysis]
  parents:
    - Fibonacci heap
  depends:
    - Complexity analysis
Fibonacci heap implementation:
  tags: [fibonacci heap, complexity analysis]
  parents:
    - Fibonacci heap
Hash table complexity analysis:
  link: 'http://en.wikipedia.org/wiki/Hash_table#Performance_analysis'
  tags: [hash table, complexity analysis]
  parents:
    - Hash tables
  depends:
    - Complexity analysis
Hash table interface:
  tags: [hash table, interface]
  parents:
    - Hash tables
  depends:
    - Classes
Classes:
  summary: An interface allows you to use existing code in the form of a class without having implemented it yourself
  depends:
    - Methods
    - Fields
Complexity analysis:
  link: 'http://en.wikipedia.org/wiki/Big_O_notation'
  summary: Complexity analysis is the process of proving the running time complexity of an algorithm
#Binary heap implementation:
#  tags: [binary heap, implementation]
#  link: https://en.wikipedia.org/wiki/Binary_heap#Heap_implementation
#  module:
#    - Find-min implementation (binary heap)
#    - Insert implementation (binary heap)
#    - Heapify implementation (binary heap)
#    - Extract-min implementation (binary heap)
Insert implementation (binary heap):
  tags: [insert, implementation, binary heap]
  link: https://en.wikipedia.org/wiki/Binary_heap#Insert
  parents:
    - Binary heap
Heapify implementation (binary heap):
  tags: [heapify, implementation, binary heap]
  link: https://en.wikipedia.org/wiki/Binary_heap#Building_a_heap
  parents:
    - Binary heap
Extract-min implementation (binary heap):
  tags: [extract-min, implementation, binary heap]
  link: https://en.wikipedia.org/wiki/Binary_heap#Delete
  parents:
    - Min heap
    - Binary heap
Min heap:
  parents:
    - Heaps
Max heap:
  parents:
    - Heaps
Binary heap:
  parents:
    - Heaps
Heaps:
  link: 'http://en.wikipedia.org/wiki/Heap_(data_structure)'
Dijkstra's algorithm complexity analysis:
  #lesson: "Dijkstra's algorithm runs in time O(E + Vlog(V)), if using a fibonacci heap as a priority queue"
  link: 'http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Running_time'
  quiz: "What is the running time of Dijkstra's algorithm, as implemented using a fibonacci heap?<br>Express your result in Big-O notation, where E denotes the number of edges, and V denotes the number of vertices.<br><input></input><br>(Answer: O(E + VlogV))"
  quizlink: '/quizzes/dijkstra.html'
  tags: [dijkstra's algorithm, complexity analysis]
  depends:
    - Fibonacci heap complexity analysis
    - Hash table complexity analysis
  parents:
    - Dijkstra's algorithm
Dijkstra's algorithm:
  #link: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
  link: 'http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Algorithm'
  tags: ["dijkstra's algorithm"]
  depends:
    - Heaps
    - Hash tables
    - Graphs
Hash tables:
  link: 'http://en.wikipedia.org/wiki/Hash_table'
Graphs:
  #link: http://en.wikipedia.org/wiki/Graph_(mathematics)
  link: 'http://en.wikipedia.org/wiki/Graph_(mathematics)#Graph'
Graph interface:
  depends:
    - Classes
Dijkstra's algorithm implementation:
  link: 'http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Pseudocode'
  tags: [dijkstra's algorithm, implementation]
  parents:
    - Dijkstra's algorithm
  depends:
    #- Heap implementation
    #- Hash table implementation
    - Graph interface
    - Heap interface
    - Hash table interface
