// Generated by LiveScript 1.3.1
(function(){
  var color_map, edge_color_map, getedgerelation, setedgecolor, getedgecolor, getnodecolor, getnode, recolor_all_edges, recolor_all_nodes, node_highlighted, reset_coloring, out$ = typeof exports != 'undefined' && exports || this;
  out$.color_map = color_map = {};
  out$.edge_color_map = edge_color_map = {};
  out$.getedgerelation = getedgerelation = function(source, target){
    var ref$, children, depends, suggests;
    if (rawdata[source] == null) {
      return 'doesnotexist';
    }
    ref$ = rawdata[source], children = ref$.children, depends = ref$.depends, suggests = ref$.suggests;
    if (children != null && children.indexOf(target) !== -1) {
      return 'children';
    }
    if (depends != null && depends.indexOf(target) !== -1) {
      return 'depends';
    }
    if (suggests != null && suggests.indexOf(target) !== -1) {
      return 'suggests';
    }
  };
  out$.setedgecolor = setedgecolor = function(source, target, color){
    if (edge_color_map[source] == null) {
      edge_color_map[source] = {};
    }
    return edge_color_map[source][target] = color;
  };
  out$.getedgecolor = getedgecolor = function(source, target){
    if (edge_color_map[source] != null) {
      if (edge_color_map[source][target] != null) {
        return edge_color_map[source][target];
      }
    }
    if (Object.keys(edge_color_map).length === 0) {
      switch (getedgerelation(source, target)) {
      case 'children':
        return '#0000aa';
      case 'depends':
        return '#00aa00';
      case 'suggests':
        return '#aa00aa';
      default:
        return '#999999';
      }
    } else {
      return '#999999';
    }
  };
  out$.getnodecolor = getnodecolor = function(name){
    var ref$;
    return (ref$ = color_map[name]) != null ? ref$ : '#333333';
  };
  out$.getnode = getnode = function(name){
    var i$, ref$, len$, x, node;
    for (i$ = 0, len$ = (ref$ = $('.node')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      node = $(x);
      name = node.find('text').text();
      return node;
    }
  };
  out$.recolor_all_edges = recolor_all_edges = function(){
    var i$, ref$, len$, x, edge, source, target, results$ = [];
    for (i$ = 0, len$ = (ref$ = $('.link')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      edge = $(x);
      source = edge.attr('source');
      target = edge.attr('target');
      results$.push(edge.css('stroke', getedgecolor(source, target)));
    }
    return results$;
  };
  out$.recolor_all_nodes = recolor_all_nodes = function(){
    var i$, ref$, len$, x, node, name, circle, results$ = [];
    for (i$ = 0, len$ = (ref$ = $('.node')).length; i$ < len$; ++i$) {
      x = ref$[i$];
      node = $(x);
      name = node.find('text').text();
      circle = node.find('circle');
      results$.push(circle.css('fill', getnodecolor(name)));
    }
    return results$;
  };
  out$.node_highlighted = node_highlighted = function(name){
    var i$, ref$, len$, ref1$, child, source;
    color_map = {};
    edge_color_map = {};
    color_map[name] = '#ff0000';
    for (i$ = 0, len$ = (ref$ = list_children_recursive(name)).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], child = ref1$.child, source = ref1$.source;
      color_map[child] = '#0000ff';
      setedgecolor(source, child, '#0000ff');
    }
    for (i$ = 0, len$ = (ref$ = list_depends_recursive(name)).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], child = ref1$.child, source = ref1$.source;
      color_map[child] = '#00ff00';
      setedgecolor(source, child, '#00ff00');
    }
    for (i$ = 0, len$ = (ref$ = list_suggests_recursive(name)).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], child = ref1$.child, source = ref1$.source;
      color_map[child] = '#ff00ff';
      setedgecolor(source, child, '#ff00ff');
    }
    recolor_all_nodes();
    return recolor_all_edges();
  };
  out$.reset_coloring = reset_coloring = function(){
    color_map = {};
    edge_color_map = {};
    recolor_all_nodes();
    return recolor_all_edges();
  };
}).call(this);
