// Generated by LiveScript 1.3.1
(function(){
  var unique, list_relation_recursive, list_parent_names, list_all_related_node_names_recursive, list_modules_node_is_part_of, list_relations_recursive, list_parents_and_depends_recursive, list_parents_recursive, list_parent_names_recursive, out$ = typeof exports != 'undefined' && exports || this;
  unique = require('prelude-ls').unique;
  /*
  export list_relation_recursive = (property, name) ->
    output = []
    if not rawdata[name]? or not rawdata[name][property]?
      return output
    for child in rawdata[name][property]
      output.push {
        child: child
        source: name
      }
      for descendant in list_relation_recursive(property, child)
        output.push descendant
    return output
  */
  out$.list_relation_recursive = list_relation_recursive = function(property, name, output_set){
    var i$, ref$, len$, child, k, v;
    if (output_set == null) {
      output_set = {};
    }
    if (rawdata[name] == null || rawdata[name][property] == null) {
      return [];
    }
    for (i$ = 0, len$ = (ref$ = rawdata[name][property]).length; i$ < len$; ++i$) {
      child = ref$[i$];
      if (output_set[child] == null) {
        output_set[child] = {
          child: child,
          source: name
        };
        list_relation_recursive(property, child, output_set);
      }
    }
    return (function(){
      var ref$, results$ = [];
      for (k in ref$ = output_set) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }());
  };
  /*
  export list_parent_names = (name) ->
    output = []
    for topic_name,topic_info of rawdata
      {children} = topic_info
      if children?
        if children.indexOf(name) != -1
          output.push topic_name
    return output
  */
  out$.list_parent_names = list_parent_names = function(name){
    var parents;
    if (rawdata[name] != null) {
      parents = rawdata[name].parents;
      if (parents != null) {
        return parents;
      }
    }
    return [];
  };
  out$.list_all_related_node_names_recursive = list_all_related_node_names_recursive = function(name, output_set){
    var i$, ref$, len$, property, related_nodes, j$, len1$, child;
    if (output_set == null) {
      output_set = {};
    }
    if (rawdata[name] == null) {
      return [];
    }
    if (output_set[name] != null) {
      return [];
    }
    output_set[name] = true;
    for (i$ = 0, len$ = (ref$ = relation_types).length; i$ < len$; ++i$) {
      property = ref$[i$];
      related_nodes = rawdata[name][property];
      if (related_nodes != null) {
        for (j$ = 0, len1$ = related_nodes.length; j$ < len1$; ++j$) {
          child = related_nodes[j$];
          if (output_set[child] == null) {
            list_all_related_node_names_recursive(child, output_set);
          }
        }
      }
    }
    return Object.keys(output_set);
  };
  out$.list_modules_node_is_part_of = list_modules_node_is_part_of = function(name){
    var output, module_name, ref$, node_info;
    output = [];
    for (module_name in ref$ = rawdata) {
      node_info = ref$[module_name];
      if (node_info.parents != null && node_info.parents.indexOf(name) !== -1) {
        output.push(module_name);
      }
    }
    return output;
  };
  out$.list_relations_recursive = list_relations_recursive = function(relations, name, depth, visited){
    var output, i$, len$, relation, j$, ref$, len1$, dependency, k$, ref1$, len2$, res;
    output = [];
    if (depth == null) {
      depth = 0;
    }
    if (visited == null) {
      visited = {};
      visited[name] = null;
    }
    if (rawdata[name] == null) {
      return [];
    }
    for (i$ = 0, len$ = relations.length; i$ < len$; ++i$) {
      relation = relations[i$];
      if (rawdata[name][relation] != null) {
        for (j$ = 0, len1$ = (ref$ = rawdata[name][relation]).length; j$ < len1$; ++j$) {
          dependency = ref$[j$];
          if (visited[dependency] === name) {
            continue;
          }
          visited[dependency] = name;
          output.push({
            name: dependency,
            relation: relation,
            depth: depth + 1,
            parent: name
          });
          for (k$ = 0, len2$ = (ref1$ = list_relations_recursive(relations, dependency, depth + 1, visited)).length; k$ < len2$; ++k$) {
            res = ref1$[k$];
            output.push(res);
          }
        }
      }
    }
    return output;
  };
  out$.list_parents_and_depends_recursive = list_parents_and_depends_recursive = function(name, depth, visited){
    return list_relations_recursive(['parents', 'depends'], name, depth, visited);
  };
  out$.list_parents_recursive = list_parents_recursive = function(name, depth, visited){
    return list_relations_recursive(['parents'], name, depth, visited);
  };
  out$.list_parent_names_recursive = list_parent_names_recursive = function(name, depth, visited){
    return list_parents_recursive(name, depth, visited).map(function(it){
      return it.name;
    });
  };
  /*
  export list_children_recursive = (name) ->
    list_relation_recursive 'children', name
  
  export list_children_names_recursive = (name) ->
    list_children_recursive(name).map (.child)
  
  export list_depends_recursive = (name) ->
    list_relation_recursive 'depends', name
  
  export list_depends_names_recursive = (name) ->
    list_depends_recursive(name).map (.child)
  
  export list_suggests_recursive = (name) ->
    list_relation_recursive 'suggests', name
  
  export list_suggests_names_recursive = (name) ->
    list_suggests_recursive(name).map (.child)
  */
}).call(this);
