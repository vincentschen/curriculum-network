// Generated by LiveScript 1.3.1
(function(){
  var root, filter_nodes_by_topic, create_legend;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  filter_nodes_by_topic = function(focus_topic){
    var data, output, whitelist, i$, ref$, len$, x, topic_name, topic_info;
    data = root.rawdata;
    output = {};
    whitelist = {};
    for (i$ = 0, len$ = (ref$ = list_all_related_node_names_recursive(focus_topic)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      whitelist[x] = true;
    }
    whitelist[focus_topic] = true;
    for (topic_name in data) {
      topic_info = data[topic_name];
      if (whitelist[topic_name] != null) {
        output[topic_name] = topic_info;
      }
    }
    return output;
  };
  create_legend = function(){
    var i$, ref$, len$, idx, relation, edgelegend, results$ = [];
    for (i$ = 0, len$ = (ref$ = root.relation_types).length; i$ < len$; ++i$) {
      idx = i$;
      relation = ref$[i$];
      edgelegend = $('<div>');
      edgelegend.css({
        'background-color': colors(idx),
        width: '10px',
        height: '10px',
        'border-radius': '10px',
        float: 'left',
        'margin-right': '5px'
      });
      results$.push($('#edgetypes').append($('<div>').text(relation).append(edgelegend)));
    }
    return results$;
  };
  $(document).ready(function(){
    var params, graph_file, ref$, focus_topic, prev_topic;
    root.params = params = getUrlParameters();
    if (params.relation_types != null) {
      root.relation_types = jsyaml.safeLoad(params.relation_types);
    }
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'graph.yaml';
    root.focus_topic = focus_topic = params.topic;
    prev_topic = params.prevtopic;
    return $.get(graph_file, function(yamltxt){
      var data, parent_names, i$, len$, parent_name, nodes, topic_name, topic_info, ref$, relation, connected_nodes, j$, len1$, name, links;
      data = jsyaml.safeLoad(yamltxt);
      data = preprocess_data(data);
      root.rawdata = data;
      create_legend();
      if (focus_topic != null && focus_topic.length > 0) {
        parent_names = list_parent_names(focus_topic);
        root.rawdata = data = filter_nodes_by_topic(focus_topic);
        $('#focustopic').text(focus_topic);
        $('#parentslist').html('');
        if (parent_names.length > 0) {
          for (i$ = 0, len$ = parent_names.length; i$ < len$; ++i$) {
            parent_name = parent_names[i$];
            $('#parentslist').append($('<a>').attr({
              href: '/?' + $.param({
                topic: parent_name
              })
            }).text(parent_name));
            $('#parentslist').append(' ');
          }
        }
      }
      nodes = {};
      for (topic_name in data) {
        topic_info = data[topic_name];
        if (nodes[topic_name] == null) {
          nodes[topic_name] = {
            name: topic_name
          };
        }
        for (i$ = 0, len$ = (ref$ = root.relation_types).length; i$ < len$; ++i$) {
          relation = ref$[i$];
          connected_nodes = topic_info[relation];
          if (connected_nodes != null) {
            for (j$ = 0, len1$ = connected_nodes.length; j$ < len1$; ++j$) {
              name = connected_nodes[j$];
              if (nodes[name] == null) {
                nodes[name] = {
                  name: name
                };
              }
            }
          }
        }
      }
      links = [];
      for (topic_name in data) {
        topic_info = data[topic_name];
        for (i$ = 0, len$ = (ref$ = root.relation_types).length; i$ < len$; ++i$) {
          relation = ref$[i$];
          connected_nodes = topic_info[relation];
          if (connected_nodes != null) {
            for (j$ = 0, len1$ = connected_nodes.length; j$ < len1$; ++j$) {
              name = connected_nodes[j$];
              links.push({
                source: nodes[topic_name],
                target: nodes[name],
                relation: relation
              });
            }
          }
        }
      }
      root.rawdata = data;
      root.nodes = nodes;
      root.links = links;
      return get_bing_counts(data, function(counts){
        var topic_name, count;
        for (topic_name in counts) {
          count = counts[topic_name];
          root.topic_to_bing_count[topic_name] = count;
        }
        return renderLinks(nodes, links);
      });
    });
  });
}).call(this);
