// Generated by LiveScript 1.3.1
(function(){
  var root, maximum, parent_dep_sorting_func, parent_dep_sorting_func_real, initialize;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  maximum = require('prelude-ls').maximum;
  parent_dep_sorting_func = function(a, b){
    if (root.visformat === 1 || root.visformat === 2) {
      return -parent_dep_sorting_func_real(a, b);
    }
    return parent_dep_sorting_func_real(a, b);
  };
  parent_dep_sorting_func_real = function(a, b){
    var relation_order, relation_diff, bradius, aradius;
    relation_order = ['parents', 'depends'];
    relation_diff = relation_order.indexOf(a.relation) - relation_order.indexOf(b.relation);
    if (relation_diff !== 0) {
      return -relation_diff;
    }
    bradius = getnoderadius_percent(b.name);
    aradius = getnoderadius_percent(a.name);
    if (aradius > bradius) {
      return 1;
    }
    if (bradius > aradius) {
      return -1;
    }
    return 0;
  };
  initialize = function(treeData, max_depth){
    var canvas_width, canvas_height, vis, tree, diagonal, nodes, links, link, node;
    canvas_width = max_depth * 250;
    canvas_height = 150;
    vis = d3.select('#curriculum').append('svg:svg').attr('width', canvas_width + 300).attr('height', canvas_height).append('svg:g').attr('transform', 'translate(10, 0)');
    tree = d3.layout.tree().size([canvas_height, canvas_width]);
    diagonal = d3.svg.diagonal().projection(function(d){
      return [canvas_width - d.y, d.x];
    });
    nodes = tree.nodes(treeData);
    links = tree.links(nodes);
    link = vis.selectAll('pathlink').data(links).enter().append('svg:path').attr('class', 'link').attr('d', diagonal).style('stroke', function(d){
      var source_name, target_name, target_children, source_depends;
      source_name = d.source.name;
      target_name = d.target.name;
      console.log(source_name + ',' + target_name);
      target_children = root.rawdata[target_name].children;
      if (target_children != null) {
        if (target_children.indexOf(source_name) !== -1) {
          return colors(1);
        }
      }
      source_depends = root.rawdata[source_name].depends;
      if (source_depends != null) {
        if (source_depends.indexOf(target_name) !== -1) {
          return colors(2);
        }
      }
      return null;
    }).style('stroke-opacity', function(d){
      return 0.5;
    });
    node = vis.selectAll('g.node').data(nodes).enter().append('svg:g').attr('transform', function(d){
      return 'translate(' + (canvas_width - d.y) + ',' + d.x + ')';
    });
    node.append('svg:circle').attr('r', 3.5);
    return node.append('svg:text').attr('dx', function(d){
      return 8;
    }).attr('dy', 3).attr('text-anchor', function(d){
      return 'start';
    }).text(function(d){
      return d.name;
    });
  };
  $(document).ready(function(){
    var params, topic, output, graph_file, ref$;
    root.params = params = getUrlParameters();
    topic = params.topic;
    if (topic == null) {
      $('#curriculum').text('need to provide topic');
      return;
    }
    output = [];
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'graph.yaml';
    return $.get(graph_file, function(yamltxt){
      var data;
      root.rawdata = data = preprocess_data(jsyaml.safeLoad(yamltxt));
      return get_bing_counts(data, function(counts){
        var topic_name, count, parents_and_depends, max_depth, treeData, name_to_treedata, i$, ref$, len$, cur_depth, j$, ref1$, len1$, ref2$, name, relation, depth, parent, parent_node;
        for (topic_name in counts) {
          count = counts[topic_name];
          root.topic_to_bing_count[topic_name] = count;
        }
        if (data[topic] == null) {
          $('#curriculum').text('topic does not exist: ' + topic);
          return;
        }
        root.all_parent_names = list_parent_names_recursive(topic);
        parents_and_depends = list_parents_and_depends_recursive(topic);
        root.max_depth = max_depth = maximum(
        parents_and_depends.map(function(it){
          return it.depth;
        }));
        parents_and_depends = list_parents_and_depends_recursive(topic);
        console.log(parents_and_depends);
        treeData = {
          name: topic,
          children: []
        };
        name_to_treedata = {};
        name_to_treedata[topic] = treeData;
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          cur_depth = ref$[i$];
          for (j$ = 0, len1$ = (ref1$ = parents_and_depends.filter(fn1$).sort(parent_dep_sorting_func)).length; j$ < len1$; ++j$) {
            ref2$ = ref1$[j$], name = ref2$.name, relation = ref2$.relation, depth = ref2$.depth, parent = ref2$.parent;
            if (name_to_treedata[topic_name] != null) {
              continue;
            }
            parent_node = name_to_treedata[parent];
            parent_node.children.push({
              name: name,
              children: []
            });
            name_to_treedata[name] = (ref2$ = parent_node.children)[ref2$.length - 1];
          }
        }
        /*
        treeData = 
          'name': 'A654'
          'children': [
            { 'name': 'A1' }
            { 'name': 'A2' }
            { 'name': 'A2B' }
            {
              'name': 'A3'
              'children': [ {
                'name': 'A31'
                'children': [
                  { 'name': 'A311' }
                  { 'name': 'A312' }
                ]
              } ]
            }
          ]
        */
        return initialize(treeData, max_depth);
        function fn$(){
          var i$, to$, results$ = [];
          for (i$ = 0, to$ = max_depth; i$ <= to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }
        function fn1$(x){
          return x.depth === cur_depth;
        }
      });
    });
  });
}).call(this);
